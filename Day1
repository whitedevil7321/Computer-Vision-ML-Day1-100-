
import cv2
import matplotlib.pyplot as plt
import numpy as np


def make_coordinates(image,line_parameters):
    slope,inercept=line_parameters
    y1=image.shape[0]
    y2=int(y1*(3/5))
    x1=int((y1-inercept)/slope) 
    x2=int((y2-inercept)/slope) 
    return np.array([x1,y1,x2,y2])




def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)  # Corrected polyfit
        slope = parameters[0]
        intercept = parameters[1]
        
        if slope < 0:
            left_fit.append((slope, intercept))
        elif slope > 0:
            right_fit.append((slope, intercept))
    
    # Average the left and right fits
    left_fit_average = np.mean(left_fit, axis=0) if left_fit else None
    right_fit_average = np.mean(right_fit, axis=0) if right_fit else None

    left_line=make_coordinates(image,left_fit_average)
    right_line=make_coordinates(image,right_fit_average)

    return np.array([left_line,right_line])

def canny(image):
    # Convert to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    # Apply Canny edge detection
    canny_image = cv2.Canny(blurred_image, 50, 150)
    return canny_image

def region_of_interest(image):
    # Get image height
    height = image.shape[0]
    # Define a triangular region of interest
    triangle = np.array([[(200, height), (1000, height), (550, 250)]], dtype=np.int32)
    # Create a mask
    mask = np.zeros_like(image)
    # Fill the mask with white inside the triangle
    cv2.fillPoly(mask, triangle, 255)
    # Apply the mask
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image

def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for x1, y1, x2, y2 in lines:
             
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 8)
    return line_image




#Process Image
cap=cv2.VideoCapture("test2.mp4")
while True:
    ret,frame=cap.read()
    if not ret:
        break


        
    # Process the image
    #image = cv2.imread("test_image.jpg")
    image=frame
    lane_image = np.copy(image)
    canny_image = canny(image)
    roi_image = region_of_interest(canny_image)

    # Detect lines using HoughLinesP
    lines = cv2.HoughLinesP(roi_image, 2, np.pi / 180, 100, np.array([]), minLineLength=40, maxLineGap=5)

    # Average slopes and intercepts for left and right lines
    averaged_lines = average_slope_intercept(lane_image, lines)

    # Create the line image
    line_image = display_lines(lane_image, averaged_lines)

    # Combine the line image with the original image
    combo_image = cv2.addWeighted(line_image, 0.8, lane_image, 1, 1)

    # Display the result
    cv2.imshow("lines", combo_image)
    if cv2.waitKey(1) &0xFF== ord("q"):
        break
cap.release()
cv2.destroyAllWindows()    
    
        

















